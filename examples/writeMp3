'use strict';

// Main Requirements
const Speaker = require('speaker');
const GoogleAssistant = require('google-assistant');

// Send MP3 Requirements
const https = require('https');
require('es6-promise').polyfill();
const lame = require('lame');
const googleTTS = require('google-tts-api');

const startConversation = (conversation) => {
  console.log('Say something!');

  let spokenResponseLength = 0;
  let speakerOpenTime;
  let speakerTimer;

  // setup the conversation
  conversation
    // send the audio buffer to the speaker
    .on('audio-data', (data) => {
      const now = new Date().getTime();
      speaker.write(data);

      // kill the speaker after enough data has been sent to it and then let it flush out
      spokenResponseLength += data.length;
      const audioTime = spokenResponseLength / (config.audio.sampleRateOut * 16 / 8) * 1000;
      clearTimeout(speakerTimer);
      speakerTimer = setTimeout(() => {
        speaker.end();
      }, audioTime - Math.max(0, now - speakerOpenTime));
    })
    // done speaking, close the mic
    .on('end-of-utterance', () => record.stop())
    // just to spit out to the console what was said
    .on('transcription', text => {
    	console.log('Transcription:', text);
    	transcription = text;
    })
    // once the conversation is ended, see if we need to follow up
    .on('ended', (error, continueConversation) => {
		if (error) {
			console.log('Conversation Ended Error:', error);
			errors = error;
		} else if (continueConversation) {
			assistant.start();
		} else {
			console.log('Conversation Complete');
			conversation.end();
			speakingStatus = 0;
			isOver = "yes";
		}
    })
    // catch any errors
    .on('error', (error) => {
      console.log('Conversation Error:', error);
      errors = error;
    });

  // check if we're using the hacky TTS engine I made ;)
  if (useMic) {
    // Pass the mic audio to the assistant
    const mic = record.start({ threshold: 0 });
    mic.on('data', data => conversation.write(data));
  } else {
    // Pass an example text to speech file to the assistant.
    // This can be any mp3 file, as long as you have the URL.
    // For demo purposes we'll use the Google Translate TTS API
    googleTTS('hello')
    .then(function (url) {
      console.log(url);
      https.get(url, function(res) {
        // check status code
        if (res.statusCode !== 200) {
          reject(new Error('request to ' + url + ' failed, status code = ' + res.statusCode + ' (' + res.statusMessage + ')'));
          return;
        }

        // Decode the mp3 with lame
        var decoder = new lame.Decoder();
        res.pipe(decoder).on('format', function(format) {
          // Write the data to the assistant
          this.pipe(conversation);
        });
      })
      .on('error', function(err) {
        reject(err);
      })
      .end();
    });
  }

  // setup the speaker
  const speaker = new Speaker({
    channels: 1,
    sampleRate: config.audio.sampleRateOut,
  });
  speaker
    .on('open', () => {
      console.log('Assistant Speaking');
      speakerOpenTime = new Date().getTime();
    })
    .on('close', () => {
      console.log('Assistant Finished Speaking');
      console.log('Ctrl+C to exit.');
      // End the conversation.
      conversation.end();
    });
};

const assistant = new GoogleAssistant(config);
	assistant
	  .on('ready', () => {
	  })
	  .on('started', startConversation)
	  .on('error', (error) => {
	    console.log('Assistant Error:', error);
	    errors = error;
	  });
    
// Start the conversation
assistant.start();
